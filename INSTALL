Requirements posed upon the user:

In this document,with user, we mean *you*, the person that downloads,
configures and installs Confusa on a server.

You should have
- some experience with Apache-configuration
- basic knowledge about cryptography (i.e. what a certificate is, and
  how it's used) but not much more is required.
- some, but not excessive, knowledge about PHP and bash-scripting, as
  this will help both *you* and *us* to track down bugs
- an open and positive mind (for a more pleasent interaction with the
  world as a whole). This has nothing to do with Confusa

To install Confusa

=== Requirements: ===
 - git (for latest checkout of confusa source code). *not* required, but handy
 - svn (for latest simplesamlphp checkout). *not* required, but handy
 - Apache2
 - PHP5
 - PEAR with MDB2.MySQL
 - Smarty (the PHP template engine)

=== Install process ===

1) Webserver (apache)

     apache2

2) Database (MySQL)
     mysql-server-5.0
     mysql-client-5.0 (you need this for bootstrapping the tables)

3) PHP

     libapache2-php5
     php5-mysql
     libphp_phpmailer
     PEAR::MDB2_mysql_driver (note: pear and MDB2_Mysql_Driver is
			      available through the backports, but we
			       refrain from using this here).

3 b) When using online, you will also need the mcrypt and curl libraries:

     php5-mcrypt
     php5-curl

3 c) When in standalone, you will need to configure the CA aspect slightly.
     One thing is to generate the key and certificate for the CA operation.

     An alternative is to just use the apache SSL-keys, generating this
     is really left as an exercise for the reader.
     The ca_* elements in the config/confusa_config.php must be set.

     The, to make sure that the uploaded keys are not vulnerable, you
     will need the blacklist-package:

     openssl-blacklist

4) Configure Apache to use SSL, use the following lines in your
   apache2/sites-enabled/appropriate.config.file and php5-openssl
   (you will have to add Confsua-specific settings, see 6b for
   details).

# Redirect http to https
<VirtualHost your.host.org:80>
        Servername your.server.org
        Redirect permanent / https://your.host.org/
</VirtualHost>

<VirtualHost your.host.org:443>
        Servername your.server.org
        SSLEngine On
        SSLProtocol All
        SSLCipherSuite ALL:!ADH:!EXPORT56:!EXPORT40:RC4+RSA:!SSLv2:+HIGH:+MEDIUM:+LOW:+EXP
        SSLVerifyClient optional_no_ca
        SSLVerifyDepth 10
        SSLOptions +StdEnvVars +ExportCertData
        SSLCertificateFile /etc/apache2/ssl/your_host.crt
        SSLCertificateKeyFile /etc/apache2/ssl/your_host.key

	...
</VirtualHost>


This is a *sample* configuration. If you know your way around an Apache
configuration, this should be more of a guideline than anything else.

5) simpleSAMLphp
   Confusa uses simpleSAMLphp to handle AuthN, and thus, you should
   configure simpleSAMLphp before venturing on.

   http://rnd.feide.no/view/simplesamlphpdocs

   Contains excellent guides on how to configure simpelSAMLphp, and is
   *required* reading.

   In simpleSAMLphp's config/config.php you should also add the custom
   Authentication Processing Filters for Confusa. This is done in the
   authproc.sp-section of the file:

   'authproc.sp' => array(
      ...
      62 => array( 'class' => 'core:CountryMap'),
      63 => array( 'class' => 'core:NRENMap'),
      ...
   ),

   You will have to either copy or symlink these into the core part of
   SimpleSAMLphp:

	ln -s /var/www/confusa/config/CountryMap.php /var/www/simplesamlphp/modules/core/lib/Auth/Process/CountryMap.php
	ln -s /var/www/confusa/config/NRENMap.php /var/www/simplesamlphp/modules/core/lib/Auth/Process/NRENMap.php

   When this is done, configure config/authsources.php as described in

	http://rnd.feide.no/content/using-simplesamlphp-service-provider

   Until IdP discovery will be implemented in simplesamlphp's SAML2
   module, the IdP must be hardcoded in the configuration. E.g. add/edit
   the following line to <simplesamlphp-dir>/config/authsources.php:

   'saml2' => array(
            'saml2:SP',
            'idp' => 'https://exampleidp.example.com',
	    /* fill in other values found via the documentation */
	    ),

    Bear in mind that the IdP with which you wish to establish the above
    trust relationship needs to accept the metadata of the saml2 module
    on your side, not only your standard metadata.


6) Install and configure Confusa

   a) Put Confusa in a directory, say /var/www/confusa/

   b) Configure Apache with something along the following line:

      For the normal webservice:

             Alias /confusa "/var/www/confusa/www/"
	     Alias /simplesaml "/var/www/simplesamlphp/www/"
             <Directory /var/www/confusa/www>
                        Options Indexes MultiViews
                        AllowOverride None
                        Order allow,deny
                        Allow from all
             </Directory>

   For the robotic interface:

             Alias /confusa_robot "/var/www/confusa/robot_www/"
             <Directory /var/www/confusa/robot_www/>
			SSLVerifyClient require
			SSLVerifyClient optional_no_ca
			Options Indexes FollowSymLinks Multiviews
			AllowOverride None
			Order deny,allow
			allow from all
             </Directory>

   You want to create a separate directory so you can enforce the
   certificate requirement and let apache fail if the client does not
   provide a certificate. Confusa *will* halt if no certificate is
   present, but you will save some extra cycles by setting Apache to
   handle this.

   Then reload apache:

	/etc/init.d/apache2 reload (or httpd (or

c) Configure the confusa_config.php file (copy the
   confusa_config_template.php and modify with values that makes sense
   to you - the template explaines the attributes).

d) Run the create_database.sh script in confusa/init folder
   This will create the database, the user and the tables. it will use
   the confusa_config.php file, so make sure that this is configured
   properly before you run this script.

e) Add a cron-job of the following type:
   */5 *   * * * /var/www/confusa/programs/clean_db.sh

   This will run the clean_db script every 5 minutes and keep the
   database nice and tidy.

f) Add a cron-job that takes backup of the database. The most critical
   part is the certificate hash part.
   A sample script lies in confusa/programs. Note that this is a simple
   mysqldump script that dumps the database specified in confusa_config

7) If you want NREN-admins to be able to customize the appearance of
   Confusa, you have to give the apache user write permissions to the
   "custom" folders:

	- www/css
	- www/graphics.

   The apache user is often called 'www-data', sometimes also 'apache2'
   or something else.  If you are unsure about the username and have
   apache running, try to find it out by executing

	ps aux | grep -e "apache" -e "http" | awk '{print $1}'

   If your apache username is www-data, execute

   chown -R www-data /usr/share/confusa/www/css/custom
   chown -R www-data /usr/share/confusa/www/graphics/custom
   chmod -R 0755 /usr/share/confusa/www/css/custom
   chmod -R 0755 /usr/share/confusa/www/graphics/custom

8) Test and verify that the system is operational before you allow
   public access.

=== Optional ===

9*) Enable OAuth authorization for third party applications. OAuth has
    the advantage that Confusa-based non-browser applications won't need
    to maintain cookies any more and that it protects against replay
    attacks. Simplesamlphp supports OAuth in more recent versions.

    Another application for OAuth is the planned server-to-server
    backend communication channel. Since we are dealing with
    user-credentials, it is important that this channels is
    - secure
    - short lived
    - approved by the user

    In order to enable OAuth in Confusa, it must first be enabled in
    simplesamlphp.

    touch <simplesaml-dir>/modules/oauth/enable

    OAuth uses the SAML2 AuthN module for the authentication
    phase. This should have been done at step 5.

    OAuth may oblige you to create a directory /tmp/oauth with write
    permissions for the webserver-process, which it will use as a token
    store.
